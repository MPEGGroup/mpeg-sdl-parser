import { Text } from "@codemirror/state";
import type { TreeCursor } from "@lezer/common";
import { AbstractNode } from "../node/AbstractNode.ts";
import { SyntacticParseError } from "../../ParseError.ts";
import { getSpecification } from "./getSpecification.ts";
import { getComputedElementaryTypeDefinition } from "./getComputedElementaryTypeDefinition.ts";
import { getElementaryType } from "./getElementaryType.ts";
import { getLengthAttribute } from "./getLengthAttribute.ts";
import { getIdentifier } from "./getIdentifier.ts";
import { getClassDeclaration } from "./getClassDeclaration.ts";
import { getElementaryTypeDefinition } from "./getElementaryTypeDefinition.ts";
import { getUnaryExpression } from "./getUnaryExpression.ts";
import { getBinaryLiteral } from "./getBinaryLiteral.ts";
import { getDecimalLiteral } from "./getDecimalLiteral.ts";
import { getFloatingPointLiteral } from "./getFloatingPointLiteral.ts";
import { getMultipleCharacterLiteral } from "./getMultipleCharacterLiteral.ts";
import { getHexadecimalLiteral } from "./getHexadecimalLiteral.ts";
import { getIntegerLiteral } from "./getIntegerLiteral.ts";
import { getIfStatement } from "./getIfStatement.ts";
import { getBinaryExpression } from "./getBinaryExpression.ts";
import { getCompoundStatement } from "./getCompoundStatement.ts";
import { getClassDefinition } from "./getClassDefinition.ts";
import { getExpressionStatement } from "./getExpressionStatement.ts";
import { getAssignmentExpression } from "./getAssignmentExpression.ts";
import { getClassMemberAccess } from "./getClassMemberAccess.ts";
import { getArrayElementAccess } from "./getArrayElementAccess.ts";
import { getArrayDefinition } from "./getArrayDefinition.ts";
import { getExplicitArrayDimension } from "./getExplicitArrayDimension.ts";
import { getImplicitArrayDimension } from "./getImplicitArrayDimension.ts";
import { getPartialArrayDimension } from "./getPartialArrayDimension.ts";
import { getAlignedModifier } from "./getAlignedModifier.ts";
import { getStringDefinition } from "./getStringDefinition.ts";
import { getUtfStringLiteral } from "./getUtfStringLiteral.ts";
import { getBase64StringLiteral } from "./getBase64StringLiteral.ts";
import { getLengthofExpression } from "./getLengthofExpression.ts";
import { getMapDeclaration } from "./getMapDeclaration.ts";
import { getMapEntry } from "./getMapEntry.ts";
import { getAggregateOutputValue } from "./getAggegateOutputValue.ts";
import { getElementaryTypeOutputValue } from "./getElementaryTypeOutputValue.ts";
import { getExpandableModifier } from "./getExpandableModifier.ts";
import { getParameterList } from "./getParameterList.ts";
import { getParameter } from "./getParameter.ts";
import { getExtendsModifier } from "./getExtendsModifier.ts";
import { getParameterValueList } from "./getParameterValueList.ts";
import { getBitModifier } from "./getBitModifier.ts";
import { getClassIdRange } from "./getClassIdRange.ts";
import { getExtendedClassIdRange } from "./getExtendedClassIdRange.ts";
import { getClassId } from "./getClassId.ts";
import { getComputedArrayDefinition } from "./getComputedArrayDefinition.ts";
import { getSwitchStatement } from "./getSwitchStatement.ts";
import { getWhileStatement } from "./getWhileStatement.ts";
import { getForStatement } from "./getForStatement.ts";
import { getDoStatement } from "./getDoStatement.ts";
import { getDefaultClause } from "./getDefaultClause.ts";
import { getCaseClause } from "./getCaseClause.ts";

// Generated by Lezer from the SDL grammar
import * as TokenTypeId from "../../lezer/parser.terms.ts";

export class NodeFactory {
  static createNode(cursor: TreeCursor, text: Text): AbstractNode {
    if (cursor.type.isError) {
      throw SyntacticParseError.fromTextAndCursor(text, cursor);
    }

    switch (cursor.type.id) {
      case TokenTypeId.AggregateOutputValue:
        return getAggregateOutputValue(cursor, text);
      case TokenTypeId.AlignedModifier:
        return getAlignedModifier(cursor, text);
      case TokenTypeId.ArrayDefinition:
        return getArrayDefinition(cursor, text);
      case TokenTypeId.ArrayElementAccess:
        return getArrayElementAccess(cursor, text);
      case TokenTypeId.AssignmentExpression:
        return getAssignmentExpression(cursor, text);
      case TokenTypeId.Base64StringLiteral:
        return getBase64StringLiteral(cursor, text);
      case TokenTypeId.BinaryExpression:
        return getBinaryExpression(cursor, text);
      case TokenTypeId.BinaryLiteral:
        return getBinaryLiteral(cursor, text);
      case TokenTypeId.BitModifier:
        return getBitModifier(cursor, text);
      case TokenTypeId.CaseClause:
        return getCaseClause(cursor, text);
      case TokenTypeId.ClassDeclaration:
        return getClassDeclaration(cursor, text);
      case TokenTypeId.ClassDefinition:
        return getClassDefinition(cursor, text);
      case TokenTypeId.ClassId:
        return getClassId(cursor, text);
      case TokenTypeId.ClassIdRange:
        return getClassIdRange(cursor, text);
      case TokenTypeId.ClassMemberAccess:
        return getClassMemberAccess(cursor, text);
      case TokenTypeId.CompoundStatement:
        return getCompoundStatement(cursor, text);
      case TokenTypeId.ComputedArrayDefinition:
        return getComputedArrayDefinition(cursor, text);
      case TokenTypeId.ComputedElementaryTypeDefinition:
        return getComputedElementaryTypeDefinition(cursor, text);
      case TokenTypeId.DecimalLiteral:
        return getDecimalLiteral(cursor, text);
      case TokenTypeId.DefaultClause:
        return getDefaultClause(cursor, text);
      case TokenTypeId.DoStatement:
        return getDoStatement(cursor, text);
      case TokenTypeId.ElementaryType:
        return getElementaryType(cursor, text);
      case TokenTypeId.ElementaryTypeDefinition:
        return getElementaryTypeDefinition(cursor, text);
      case TokenTypeId.ElementaryTypeOutputValue:
        return getElementaryTypeOutputValue(cursor, text);
      case TokenTypeId.ExpandableModifier:
        return getExpandableModifier(cursor, text);
      case TokenTypeId.ExplicitArrayDimension:
        return getExplicitArrayDimension(cursor, text);
      case TokenTypeId.ExpressionStatement:
        return getExpressionStatement(cursor, text);
      case TokenTypeId.ExtendedClassIdRange:
        return getExtendedClassIdRange(cursor, text);
      case TokenTypeId.ExtendsModifier:
        return getExtendsModifier(cursor, text);
      case TokenTypeId.FloatingPointLiteral:
        return getFloatingPointLiteral(cursor, text);
      case TokenTypeId.ForStatement:
        return getForStatement(cursor, text);
      case TokenTypeId.HexadecimalLiteral:
        return getHexadecimalLiteral(cursor, text);
      case TokenTypeId.Identifier:
        return getIdentifier(cursor, text);
      case TokenTypeId.IfStatement:
        return getIfStatement(cursor, text);
      case TokenTypeId.ImplicitArrayDimension:
        return getImplicitArrayDimension(cursor, text);
      case TokenTypeId.IntegerLiteral:
        return getIntegerLiteral(cursor, text);
      case TokenTypeId.LengthAttribute:
        return getLengthAttribute(cursor, text);
      case TokenTypeId.LengthofExpression:
        return getLengthofExpression(cursor, text);
      case TokenTypeId.MapDeclaration:
        return getMapDeclaration(cursor, text);
      case TokenTypeId.MapEntry:
        return getMapEntry(cursor, text);
      case TokenTypeId.MultipleCharacterLiteral:
        return getMultipleCharacterLiteral(cursor, text);
      case TokenTypeId.Parameter:
        return getParameter(cursor, text);
      case TokenTypeId.ParameterList:
        return getParameterList(cursor, text);
      case TokenTypeId.ParameterValueList:
        return getParameterValueList(cursor, text);
      case TokenTypeId.PartialArrayDimension:
        return getPartialArrayDimension(cursor, text);
      case TokenTypeId.Specification:
        return getSpecification(cursor, text);
      case TokenTypeId.StringDefinition:
        return getStringDefinition(cursor, text);
      case TokenTypeId.SwitchStatement:
        return getSwitchStatement(cursor, text);
      case TokenTypeId.UtfStringLiteral:
        return getUtfStringLiteral(cursor, text);
      case TokenTypeId.UnaryExpression:
        return getUnaryExpression(cursor, text);
      case TokenTypeId.WhileStatement:
        return getWhileStatement(cursor, text);
      default:
        throw new Error(
          `Unsupported node type: ${cursor.type.name}`,
        );
    }
  }
}
