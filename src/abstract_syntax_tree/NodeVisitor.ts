import Alignment from "./node/Alignment.ts";
import ArrayDefinition from "./node/ArrayDefinition.ts";
import ArrayDimension from "./node/ArrayDimension.ts";
import ArrayElementAccessExpression from "./node/ArrayElementAccessExpression.ts";
import AssignmentExpression from "./node/AssignmentExpression.ts";
import BinaryExpression from "./node/BinaryExpression.ts";
import ClassDeclaration from "./node/ClassDeclaration.ts";
import ClassDefinition from "./node/ClassDefinition.ts";
import ClassDefinitionBitAttribute from "./node/ClassDefinitionBitAttribute.ts";
import ClassDefinitionParameter from "./node/ClassDefinitionParameter.ts";
import ClassIdSpecification from "./node/ClassIdSpecification.ts";
import ClassMemberAccessExpression from "./node/ClassMemberAccessExpression.ts";
import Comment from "./node/Comment.ts";
import CompoundStatement from "./node/CompoundStatement.ts";
import DoStatement from "./node/DoStatement.ts";
import ElementaryTypeArrayItemType from "./node/ElementaryTypeArrayItemType.ts";
import ExpressionStatement from "./node/ExpressionStatement.ts";
import ForStatement from "./node/ForStatement.ts";
import Identifier from "./node/Identifier.ts";
import IfStatement from "./node/IfStatement.ts";
import LengthOfExpression from "./node/LengthOfExpression.ts";
import MapDeclaration from "./node/MapDeclaration.ts";
import MapDefinition from "./node/MapDefinition.ts";
import NonParsableDefinition from "./node/NonParsableDefinition.ts";
import NumberLiteral from "./node/NumberLiteral.ts";
import ParsableDefinition from "./node/ParsableDefinition.ts";
import Specification from "./node/Specification.ts";
import StringDefinition from "./node/StringDefinition.ts";
import StringLiteral from "./node/StringLiteral.ts";
import SwitchStatement from "./node/SwitchStatement.ts";
import UnaryExpression from "./node/UnaryExpression.ts";
import VariableDefinition from "./node/VariableDefinition.ts";
import WhileStatement from "./node/WhileStatement.ts";

interface NodeVisitor {
  visitComment(node: Comment): void;
  visitIdentifier(node: Identifier): void;
  visitUnaryExpression(node: UnaryExpression): void;
  visitBinaryExpression(node: BinaryExpression): void;
  visitAssignmentExpression(node: AssignmentExpression): void;
  visitExpressionStatement(node: ExpressionStatement): void;
  visitCompoundStatement(node: CompoundStatement): void;
  visitLengthOfExpression(node: LengthOfExpression): void;
  visitClassMemberAccessExpression(node: ClassMemberAccessExpression): void;
  visitNumberLiteral(node: NumberLiteral): void;
  visitStringLiteral(node: StringLiteral): void;
  visitSpecification(node: Specification): void;
  visitVariableDefinition(node: VariableDefinition): void;
  visitAlignment(node: Alignment): void;
  visitParsableDefinition(node: ParsableDefinition): void;
  visitMapDeclaration(node: MapDeclaration): void;
  visitMapDefinition(node: MapDefinition): void;
  visitStringDefinition(node: StringDefinition): void;
  visitClassIdSpecification(node: ClassIdSpecification): void;
  visitClassDefinitionBitAttribute(node: ClassDefinitionBitAttribute): void;
  visitClassDefinitionParameter(node: ClassDefinitionParameter): void;
  visitClassDeclaration(node: ClassDeclaration): void;
  visitClassDefinition(node: ClassDefinition): void;
  visitElementaryTypeArrayItemType(node: ElementaryTypeArrayItemType): void;
  visitArrayElementAccessExpression(node: ArrayElementAccessExpression): void;
  visitArrayDimension(node: ArrayDimension): void;
  visitArrayDefinition(node: ArrayDefinition): void;
  visitNonParsableDefinition(node: NonParsableDefinition): void;
  visitIfStatement(node: IfStatement): void;
  visitSwitchStatement(node: SwitchStatement): void;
  visitForStatement(node: ForStatement): void;
  visitDoStatement(node: DoStatement): void;
  visitWhileStatement(node: WhileStatement): void;
}

export default NodeVisitor;
