import { NodeProp, NodeType } from "@lezer/common";

// Generated by Lezer from the SDL grammar
import * as TokenTypeId from "../parser.terms.ts";

export const syntacticTokenNodeProp = new NodeProp<string>();
export const syntacticTokenNodePropSource = syntacticTokenNodeProp.add(
  (type: NodeType) => {
    switch (type.id) {
      case TokenTypeId.CloseBrace:
        return "}";
      case TokenTypeId.aligned:
        return "aligned";
      case TokenTypeId.OpenParenthesis:
        return "(";
      case TokenTypeId.CloseParenthesis:
        return ")";
      case TokenTypeId.expandable:
        return "expandable";
      case TokenTypeId.abstract:
        return "abstract";
      case TokenTypeId._class:
        return "class";
      case TokenTypeId.int:
        return "int";
      case TokenTypeId.unsigned:
        return "unsigned";
      case TokenTypeId.float:
        return "float";
      case TokenTypeId.bit:
        return "bit";
      case TokenTypeId.Comma:
        return ",";
      case TokenTypeId._extends:
        return "extends";
      case TokenTypeId.Multiplication:
        return "*";
      case TokenTypeId.Division:
        return "/";
      case TokenTypeId.Modulus:
        return "%";
      case TokenTypeId.Addition:
        return "+";
      case TokenTypeId.Subtraction:
        return "-";
      case TokenTypeId.BitwiseShiftLeft:
        return "<<";
      case TokenTypeId.BitwiseShiftRight:
        return ">>";
      case TokenTypeId.RelationalLessThan:
        return "<";
      case TokenTypeId.RelationalLessThanOrEqual:
        return "<=";
      case TokenTypeId.RelationalGreaterThan:
        return ">";
      case TokenTypeId.RelationalGreaterThanOrEqual:
        return ">=";
      case TokenTypeId.RelationalEqual:
        return "==";
      case TokenTypeId.RelationalNotEqual:
        return "!=";
      case TokenTypeId.BitwiseAnd:
        return "&";
      case TokenTypeId.BitwiseOr:
        return "|";
      case TokenTypeId.LogicalAnd:
        return "&&";
      case TokenTypeId.LogicalOr:
        return "||";
      case TokenTypeId.CloseBracket:
        return "]";
      case TokenTypeId.OpenBracket:
        return "[";
      case TokenTypeId.ClassMemberAccess:
        return ".";
      case TokenTypeId.Period:
        return ".";
      case TokenTypeId.PostfixIncrement:
        return "++";
      case TokenTypeId.PostfixDecrement:
        return "--";
      case TokenTypeId.UnaryPlus:
        return "+";
      case TokenTypeId.UnaryNegation:
        return "-";
      case TokenTypeId.lengthof:
        return "lengthof";
      case TokenTypeId.SingleQuote:
        return "'";
      case TokenTypeId.Colon:
        return ":";
      case TokenTypeId.Assignment:
        return "=";
      case TokenTypeId.RangeOperator:
        return "..";
      case TokenTypeId.OpenBrace:
        return "{";
      case TokenTypeId._if:
        return "if";
      case TokenTypeId._else:
        return "else";
      case TokenTypeId._switch:
        return "switch";
      case TokenTypeId._case:
        return "case";
      case TokenTypeId._break:
        return "break";
      case TokenTypeId.Semicolon:
        return ";";
      case TokenTypeId._default:
        return "default";
      case TokenTypeId._for:
        return "for";
      case TokenTypeId.computed:
        return "computed";
      case TokenTypeId._const:
        return "const";
      case TokenTypeId._do:
        return "do";
      case TokenTypeId._while:
        return "while";
      case TokenTypeId.reserved:
        return "reserved";
      case TokenTypeId.legacy:
        return "legacy";
      case TokenTypeId.LookAhead:
        return "*";
      case TokenTypeId.base64string:
        return "base64string";
      case TokenTypeId.DoubleQuote:
        return '"';
      case TokenTypeId.utf16string:
        return "utf16string";
      case TokenTypeId.UtfPrefix:
        return "u";
      case TokenTypeId.utf8string:
        return "utf8string";
      case TokenTypeId.utf8list:
        return "utf8list";
      case TokenTypeId.utfstring:
        return "utfstring";
      case TokenTypeId.map:
        return "map";
      case TokenTypeId.AlignmentBitCount8:
        return "8";
      case TokenTypeId.AlignmentBitCount16:
        return "16";
      case TokenTypeId.AlignmentBitCount32:
        return "32";
      case TokenTypeId.AlignmentBitCount64:
        return "64";
      case TokenTypeId.AlignmentBitCount128:
        return "128";
      default:
        return undefined;
    }
  },
);
