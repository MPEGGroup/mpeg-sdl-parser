import { NodeProp, type NodePropSource, NodeType } from "@lezer/common";

// Generated by Lezer from the SDL grammar
import * as TokenTypeId from "../parser.terms.ts";

export const primitiveNodeProp = new NodeProp<boolean>();

export function getPrimitiveNodePropSource(): NodePropSource {
  return (type: NodeType) => {
    return type.id === TokenTypeId.AlignmentBitCount ||
        type.id === TokenTypeId.BinaryLiteral ||
        type.id === TokenTypeId.DecimalLiteral ||
        type.id === TokenTypeId.FloatingPointLiteral ||
        type.id === TokenTypeId.HexadecimalLiteral ||
        type.id === TokenTypeId.Identifier ||
        type.id === TokenTypeId.IntegerLiteral
      ? [primitiveNodeProp, true]
      : [primitiveNodeProp, false];
  };
}
