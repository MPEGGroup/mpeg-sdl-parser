import { NodeProp, type NodePropSource, NodeType } from "@lezer/common";

// Generated by Lezer from the SDL grammar
import * as TokenTypeId from "../parser.terms.ts";

export const blockStatementNodeProp = new NodeProp<boolean>();

export function getBlockStatementNodePropSource(): NodePropSource {
  return (type: NodeType) => {
    return type.id === TokenTypeId.ClassDeclaration ||
        type.id === TokenTypeId.MapDeclaration ||
        type.id === TokenTypeId.CompoundStatement ||
        type.id === TokenTypeId.SwitchStatement ||
        type.id === TokenTypeId.CaseClause ||
        type.id === TokenTypeId.DefaultClause ||
        type.id === TokenTypeId.IfStatement ||
        type.id === TokenTypeId.WhileStatement ||
        type.id === TokenTypeId.DoStatement ||
        type.id === TokenTypeId.ForStatement
      ? [blockStatementNodeProp, true]
      : [blockStatementNodeProp, false];
  };
}
