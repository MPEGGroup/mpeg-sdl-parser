// Generated by Lezer from the SDL grammar
import * as TokenTypeId from "../../lezer/parser.terms.ts";

export const bitModifierRules = [
  { previous: -1, expected: TokenTypeId.Colon },
  { previous: TokenTypeId.Colon, expected: TokenTypeId.bit },
  { previous: TokenTypeId.bit, expected: TokenTypeId.OpenParenthesis },
  {
    previous: TokenTypeId.OpenParenthesis,
    expected: TokenTypeId.IntegerLiteral,
  },
  {
    previous: TokenTypeId.IntegerLiteral,
    expected: TokenTypeId.CloseParenthesis,
  },
  {
    previous: TokenTypeId.CloseParenthesis,
    expected: [TokenTypeId.Identifier, TokenTypeId.ExtendedClassIdRange],
  },
  { previous: TokenTypeId.Identifier, expected: TokenTypeId.Assignment },
  {
    previous: TokenTypeId.Assignment,
    expected: TokenTypeId.ExtendedClassIdRange,
  },
  { previous: TokenTypeId.ExtendedClassIdRange, expected: -1 },
];
