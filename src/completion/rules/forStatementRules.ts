// Generated by Lezer from the SDL grammar
import * as TokenTypeId from "../../lezer/parser.terms.ts";
import { expressionTypes } from "./abstractTypes.ts";

export const forStatementRules = [
  {
    previous: -1,
    expected: TokenTypeId._for,
  },
  {
    previous: TokenTypeId._for,
    expected: TokenTypeId.OpenParenthesis,
  },
  {
    previous: TokenTypeId.OpenParenthesis,
    expected: [
      TokenTypeId.AssignmentExpression,
      TokenTypeId.ComputedElementaryTypeDefinition,
      TokenTypeId.Semicolon,
    ],
  },
  {
    previous: TokenTypeId.ComputedElementaryTypeDefinition,
    expected: TokenTypeId.Semicolon,
  },
  {
    previous: TokenTypeId.Semicolon,
    expected: [
      TokenTypeId.AssignmentExpression,
      ...expressionTypes,
      TokenTypeId.CloseParenthesis,
    ],
  },
  {
    previous: [
      TokenTypeId.AssignmentExpression,
      ...expressionTypes,
    ],
    expected: [TokenTypeId.Semicolon],
  },
  {
    previous: TokenTypeId.CloseParenthesis,
    expected: TokenTypeId.CompoundStatement,
  },
];
