// Generated by Lezer from the SDL grammar
import * as TokenTypeId from "../../lezer/parser.terms.ts";
import { expressionTypes } from "./abstractTypes.ts";

export const computedElementaryTypeRules = [
  { previous: -1, expected: TokenTypeId.computed },
  {
    previous: TokenTypeId.computed,
    expected: [TokenTypeId._const, TokenTypeId.ElementaryType],
  },
  { previous: TokenTypeId._const, expected: TokenTypeId.ElementaryType },
  { previous: TokenTypeId.ElementaryType, expected: TokenTypeId.Identifier },
  {
    previous: TokenTypeId.Identifier,
    expected: [TokenTypeId.Assignment, TokenTypeId.Semicolon],
  },
  {
    previous: TokenTypeId.Assignment,
    expected: expressionTypes,
  },
  { previous: TokenTypeId.UnaryExpression, expected: TokenTypeId.Semicolon },
  { previous: TokenTypeId.BinaryExpression, expected: TokenTypeId.Semicolon },
];
