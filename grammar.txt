/* Comment */

comment ::= //[#x0000-#x10FFFF]+

/* Rule S.2: Binary value */

binary_character ::= 0 | 1

binary_character_string ::= binary_character*

four_binary_characters ::= binary_character binary_character binary_character binary_character

one_to_four_binary_characters ::= binary_character binary_character? binary_character? binary_character?

period_separated_binary_character_string ::= four_binary_characters ( '.' four_binary_characters )+ ( '.' one_to_four_binary_characters )?

binary_value ::= '0b' ( binary_character_string | period_separated_binary_character_string )


/* Rule S.3: Hexadecimal value */

hexadecimal_character ::= [0-9A-F]

hexadecimal_character_string ::= hexadecimal_character*

four_hexadecimal_characters ::= hexadecimal_character hexadecimal_character hexadecimal_character hexadecimal_character

one_to_four_hexadecimal_characters ::= hexadecimal_character hexadecimal_character? hexadecimal_character? hexadecimal_character?

period_separated_hexadecimal_character_string ::= four_hexadecimal_characters ( '.' four_hexadecimal_characters )+ ( '.' one_to_four_hexadecimal_characters )?

hexadecimal_value ::= '0x' ( hexadecimal_character_string | period_separated_hexadecimal_character_string )


/* Identifiers */

positive_digit ::= [1-9]

digit ::= 0 | positive_digit

character ::= [a-zA-Z]

identifier_character ::= digit | character | '_'

/* An identifier may start with and contain any identifier_character but must contain at least one character */

identifier ::= identifier_character* character identifier_character*


/* Numbers */

positive_integer_value ::= positive_digit digit*

integer_value ::= '-'? (0 | positive_integer_value)

float_value ::= integer_value ( '.' digit+ )? ('e' integer_value)?

number_value ::= integer_value
                 | float_value
                 | binary_value
                 | hexadecimal_value


/* Expressions */

postfix_operator ::= '++' | '--'

arithmetic_operator ::= '*' | '/' | '%' | '+' | '-'

shift_operator ::= '<<' | '>>'

comparison_operator ::= '<' | '<=' | '>' | '>=' | '==' | '!='

binary_operator ::= '&' | '|'

logical_operator ::= '&&' | '||'

assignment_target ::= identifier | class_member_expression

unary_expression ::= ( identifier | number_value | lengthof_expression | class_member_expression | '(' expression ')' ) postfix_operator?

expression ::= unary_expression ( ( arithmetic_operator | shift_operator | comparison_operator | binary_operator | logical_operator ) unary_expression )*

assignment_expression ::= assignment_target '=' expression

constant_expression ::= number_value | utf_string_literal


/* Rule O.1: Range operator */

range_operator ::= '..'


/* Rule O.2: Class member access operator */

class_member_expression ::= identifier ( '.' identifier )+


/* Rule F.1: lengthof() function */

lengthof_expression ::= 'lengthof' '(' identifier ')'


/* Rule E.1: Elementary data types */

elementary_type ::= 'int' | 'unsigned int' | 'float' | 'bit'

aligned_attribute ::= aligned ( '[' ( '8' | '16' | '32' | '64' | '128' ) ']' )?

/* Expression must evaluate to strictly positive integer value and if the associated type is float it must be further constrained to 16, 32, 64, 128, 256 */

width_attribute ::= '(' expression ')'

non_parsable_variable_definition ::= elementary_type identifier


/* Rule E.2: Look-ahead parsing */

parsable_variable_definition ::= aligned_attribute? elementary_type width_attribute '*'? identifier

non_parsable_value_variable_definition ::= non_parsable_variable_definition '=' number_value

parsable_value_variable_definition ::= parsable_variable_definition '=' number_value

const_non_parsable_value_variable_definition ::= 'const' non_parsable_variable_definition '=' number_value

const_parsable_value_variable_definition ::= 'const' parsable_variable_definition '=' number_value

range_variable_definition ::= parsable_variable_definition '=' number_value range_operator number_value

elementary_type_variable_definition ::= ( const_non_parsable_value_variable_definition
                                        | const_parsable_value_variable_definition
                                        | range_variable_definition
                                        | non_parsable_value_variable_definition
                                        | parsable_value_variable_definition
                                        | parsable_variable_definition
                                        | non_parsable_variable_definition
                                        ) ';'


/* Rule E.3: Maps */

output_value ::= aggregate_output_value | number_value | elementary_type width_attribute

aggregate_output_value ::= '{' ( output_value ',' )* output_value '}'

map_definition_entry ::= binary_value ',' aggregate_output_value

/* The identifier within the literal brackets must refer to the name of a class */

map_definition ::= 'map' identifier '(' ( identifier | elementary_type ) ')' '{' ( map_definition_entry ',' )+ map_definition_entry '}'


/* Rule E.4: Mapped data types */

/* The identifier before the literal brackets must refer to the name of a class */

/* The identifier within the literal brackets must refer to the name of a map */

map_variable_definition ::= ( identifier | elementary_type ) '(' identifier ')' identifier ';'


/* Rule E.5: String data types */

/* There is ambiguity between utf_character and base64_character which is resolved in the definition of utf8_string_variable_definition, utf16_string_variable_definition and base64_string_variable_definition */

utf_character ::= ([#x0000-#x10FFFF] - '"' - #xFEFF) | '\"'

base64_character ::= digit | character | '+' | '/'

utf_string_literal ::= '"' utf_character* '"'

utf16_string_literal ::= '"' #xFEFF utf_character* '"'

base64_string_literal ::= '"' base64_character* '='? '='? '"'

utf8_string_variable_definition ::= ( 'utf8string' | 'utfstring' | 'utf8list' ) identifier ( '=' 'u8' utf_string_literal )?

utf16_string_variable_definition ::= 'utfstring' identifier ( '=' 'u' ( utf_string_literal | utf16_string_literal ) )?

base64_string_variable_definition ::= 'base64string' identifier ( '=' base64_string_literal )?

string_variable_definition ::= ( base64_string_variable_definition | utf8_string_variable_definition | utf16_string_variable_definition ) ';'


/* Rule C.2: Derived classes */

/* The identifier must refer to the name of a class */

extends_attribute ::= 'extends' identifier

object_id ::= 0 | positive_integer_value

id_range ::= object_id '..' object_id

bit_attribute ::= [':' 'bit' '(' positive_integer_value ')' [ identifier '='] object_id | id_range (',' extended_id_range)* ]


/* Rule C.3: Abstract classes */

abstract_attribute ::= 'abstract'


/* Rule C.4: Expandable classes */

expandable_attribute ::= 'expandable' ( '(' positive_integer_value ')' )?


/* Rule C.5: Class parameter types */

/* The optional identifier must refer to the name of a class */

/* The optional identifier must refer to the name of a class */

parameter_list_item ::= ( identifier | elementary_type ) identifier

parameter_list ::= '(' ( parameter_list_item ',' )* parameter_list_item ')'

parameter_values ::= '(' ( expression ',' )* expression ')'


/* Rule C.1: Classes */

class_definition ::= aligned_attribute expandable_attribute? abstract_attribute? 'class' identifier parameter_list? extends_attribute? bit_attribute? '{' statement* '}'

/* The first identifier must refer to the name of a class */

class_variable_definition ::= identifier identifier parameter_values? ';'


/* Rule A.3: Partial arrays */

partial_array_dimension_specifier ::= '[' expression ']'


/* Rule A.4: Implicit arrays */

implicit_array_dimension_specifier ::= ( positive_integer_value range_operator positive_integer_value )?


/* Rule A.1: Arrays */

/* Rule A.2: Multi-dimensional arrays */

/* The optional identifier must refer to the name of a class */

array_item_type ::= elementary_type width_attribute | identifier

array_dimension_definition ::= '[' ( expression | partial_array_dimension_specifier | implicit_array_dimension_specifier ) ']'

array_variable_definition ::= array_item_type identifier array_dimension_definition+ ';'



/* Rule FC.1: Flow control using if-then-else */

if_statement ::= 'if' '(' expression ')' compound_statement ( 'else' 'if' '(' expression ')' compound_statement )* ( 'else' compound_statement )*


/* Rule FC.2: Flow control using switch */

switch_case_clause ::= 'case' constant_expression ':' ( ( statement* 'break' ';' ) | ( '{' statement* 'break' ';' '}' ) )
switch_default_clause ::= 'default' ':' ( statement* | ( '{' statement* '}' ) )
switch_statement ::= 'switch' '(' expression ')' '{' switch_case_clause* switch_default_clause? '}'


/* Rule FC.3: Flow control using for */

for_statement ::= 'for' '(' ( assignment_expression | non_parsable_value_variable_definition ) ';' expression ';' ( assignment_expression | expression ) ')' compound_statement


/* Rule FC.4: Flow control using do */

do_statement ::= 'do' compound_statement 'while' '(' expression ')' ';'


/* Rule FC.5: Flow control using while */

while_statement ::= 'while' '(' expression ')' compound_statement


/* Statements */

expression_statement ::= expression ';'

assignment_expression_statement ::= assignment_expression ';'

/* Block scoping */

compound_statement ::= '{' statement* '}'

statement ::= compound_statement
              | elementary_type_variable_definition
              | map_definition
              | map_variable_definition
              | string_variable_definition
              | class_definition
              | class_variable_definition
              | array_variable_definition
              | if_statement
              | switch_statement
              | for_statement
              | do_statement
              | while_statement
              | expression_statement
              | assignment_expression_statement


/* Top level */

Definition ::= ( statement | comment | ( statement comment ) )*
